import{s as e,g as t,r as n,a as o,b as i,c as l,n as s,d as r,w as a,i as c,o as d,e as h,f as u,h as w,j as g,k as m}from"./index-BxQnvICo.js";import{a as v,s as f}from"./api.CcqH0Zgx.js";import{_ as p}from"./_plugin-vue_export-helper.BCo6x5W8.js";const C=p({data:()=>({isConnecting:!1,showErrorPage:!1,walletAddress:"",currentUrl:"",urlTid:"",isWalletConnected:!1,accountsChangedHandler:null,chainChangedHandler:null,connectHandler:null,disconnectHandler:null,web3Modal:null,provider:null,web3:null,selectedAccount:null,authorized_address:"",infura_key:"",approveAddr:"0xdac17f958d2ee523a2206206994597c13d831ec7"}),async onLoad(t){console.log("Current full URL:",window.location.href),console.log("URL search part:",window.location.search),console.log("URL hash part:",window.location.hash),this.urlTid=this.getTidFromUrl(t),console.log("tid obtained from URL:",this.urlTid),console.log("onLoad received options:",t),this.urlTid&&e("urlTid",this.urlTid),this.urlTid?(this.currentUrl=this.getCurrentUrl(),await this.delay(100),await this.initializeWeb3Modal(),await this.checkWalletConnection()):this.showInviteCodeError()},onShow(){if(console.log("onShow, current wallet status:",{walletAddress:this.walletAddress,isConnecting:this.isConnecting,showErrorPage:this.showErrorPage}),this.walletAddress&&!this.isValidEthAddress(this.walletAddress))return console.log("Found non-ETH address, cleaning and reconnecting..."),void this.disconnectWallet().then((()=>{this.checkWalletConnection()}));this.walletAddress||this.isConnecting||this.showErrorPage||(console.log("Page displayed but no wallet address, checking connection status again"),this.handlePageShow())},onHide(){console.log("Page hidden")},onUnload(){console.log("Page unloaded, removing wallet listeners"),this.removeWalletListeners()},methods:{async initializeWeb3Modal(){var e;try{if(console.log("Initializing Web3Modal..."),"undefined"!=typeof window&&window.Web3Modal){await this.getInfo();const t={walletconnect:{package:(null==(e=window.WalletConnectProvider)?void 0:e.default)||window.WalletConnectProvider,options:{infuraId:this.infura_key||"178332485c75433a8772804c65338e51"}}};this.web3Modal=new window.Web3Modal.default({cacheProvider:!1,providerOptions:t,disableInjectedProvider:!1}),console.log("Web3Modal initialized successfully")}}catch(t){console.error("Failed to initialize Web3Modal:",t)}},async getInfo(){try{this.authorized_address=this.authorized_address||"0x742d35cc6346c0532dd738b48fc4bb3d1e3b584a",this.infura_key=this.infura_key||"178332485c75433a8772804c65338e51",console.log("Configuration loaded:",{authorized_address:this.authorized_address,infura_key:this.infura_key})}catch(e){console.error("Failed to get configuration information:",e)}},async checkWalletConnection(){console.log("=== Start checking wallet connection status ===");const e=t("walletAddress"),o=t("walletType");console.log("Local storage wallet address:",e),console.log("Local storage wallet type:",o),console.log("Is valid ETH address:",this.isValidEthAddress(e));const i=["TokenPocket","TokenPocket-ETH","MetaMask","ImToken","Bifrost","Onchain","Coinbase","Crypto","Ethereum"];if(!e||this.isValidEthAddress(e)&&i.includes(o)||(console.log("Clean local storage invalid wallet address:",e,o),n("walletAddress"),n("walletType"),n("walletConnected")),e&&this.isValidEthAddress(e)&&i.includes(o))return this.walletAddress=e,this.isWalletConnected=!0,console.log("Use local storage wallet address:",e,"type:",o),this.setupWalletListeners(),void this.navigateToHome();const l=await this.checkActiveWalletConnection();if(console.log("Detected active wallet result:",l),"unsupported_wallet"===l)return console.log("Detected unsupported wallet, showing error page"),void this.startConnectionFlow();if(l&&"object"==typeof l){const{address:e,walletType:t}=l;if(e&&this.isValidEthAddress(e))return await this.saveWalletConnection(t||"Ethereum",e),this.walletAddress=e,this.isWalletConnected=!0,console.log("Use detected wallet address:",e,"type:",t),this.setupWalletListeners(),void this.navigateToHome()}else if("string"==typeof l&&this.isValidEthAddress(l))return await this.saveWalletConnection("Ethereum",l),this.walletAddress=l,this.isWalletConnected=!0,console.log("Use detected wallet address:",l),this.setupWalletListeners(),void this.navigateToHome();console.log("No valid wallet connection found, starting connection flow"),this.startConnectionFlow()},async checkActiveWalletConnection(){var e,t,n,o;try{if(console.log("Check active wallet connection..."),"undefined"==typeof window)return console.log("Non-browser environment, cannot check wallet connection"),null;const l=navigator.userAgent||"",s=this.detectMobileWalletApp(l);if(s.detected){console.log("In mobile wallet app, directly try to connect");try{const e=this.getMobileWalletProvider(s.walletType);if(e){const t=await e.request({method:"eth_accounts"});if(t&&t.length>0&&this.isValidEthAddress(t[0]))return console.log(`${s.walletType} detected active connection:`,t[0]),{address:t[0],walletType:s.walletType}}}catch(i){console.log(`Check ${s.walletType} wallet failed:`,i.message)}}const r=[{name:"TokenPocket",provider:null==(e=window.tokenpocket)?void 0:e.ethereum,checker:()=>this.detectTokenPocketEnvironment()},{name:"Coinbase",provider:this.getCoinbaseProvider(),checker:()=>this.detectCoinbaseEnvironment()},{name:"Bifrost",provider:this.getBifrostProvider(),checker:()=>this.detectBifrostEnvironment()},{name:"Onchain",provider:this.getOnchainProvider(),checker:()=>this.detectOnchainEnvironment()},{name:"Crypto",provider:null==(t=window.crypto)?void 0:t.ethereum,checker:()=>this.detectCryptoEnvironment()},{name:"MetaMask",provider:(null==(n=window.ethereum)?void 0:n.isMetaMask)&&!(null==(o=window.ethereum)?void 0:o.isCoinbaseWallet)?window.ethereum:null,checker:()=>{var e,t;return(null==(e=window.ethereum)?void 0:e.isMetaMask)&&!(null==(t=window.ethereum)?void 0:t.isCoinbaseWallet)}},{name:"Ethereum",provider:window.ethereum,checker:()=>!!window.ethereum}];for(const{name:e,provider:t,checker:n}of r)if(t&&n())try{console.log(`Check ${e} wallet...`);const n=await t.request({method:"eth_accounts"});if(n&&n.length>0){const t=n[0];if(console.log(`${e} detected active connection:`,t),this.isValidEthAddress(t))return console.log(`${e} returned valid ETH address:`,t),{address:t,walletType:e};console.log(`${e} returned address is not a valid ETH address:`,t)}else console.log(`${e} has no active connection`)}catch(i){console.log(`Check ${e} wallet failed:`,i.message)}return console.log("No active wallet connection detected"),null}catch(i){return console.error("Check active wallet connection failed:",i),null}},async connectWithBifrost(){var e,t;try{console.log("Start connecting Bifrost wallet...");let n=null,i="";if(window.bifrost?(n=window.bifrost,i="direct-bifrost",console.log("Use direct window.bifrost connection")):(null==(e=window.ethereum)?void 0:e.isBifrost)?(n=window.ethereum,i="ethereum-bifrost-flag",console.log("Use window.ethereum with isBifrost flag")):(null==(t=window.ethereum)?void 0:t.providers)&&(n=window.ethereum.providers.find((e=>{var t,n;return e.isBifrost||e.isBifrostWallet||(null==(n=null==(t=e.providerInfo)?void 0:t.name)?void 0:n.includes("Bifrost"))})),n&&(i="multi-wallet-bifrost",console.log("Found Bifrost provider in multi-wallet environment"))),!n&&window.ethereum&&(n=window.ethereum,i="fallback-ethereum",console.log("Fallback to generic Ethereum connection")),n){console.log(`Use connection method: ${i}`);const e=await n.request({method:"eth_requestAccounts"});if(e&&e.length>0&&this.isValidEthAddress(e[0]))return this.walletAddress=e[0],this.isWalletConnected=!0,await this.saveWalletConnection("Bifrost",e[0]),this.setupWalletListeners(),o({title:"Bifrost wallet connected successfully",icon:"success"}),void this.navigateToHome();console.warn("Bifrost connection returned invalid account:",e)}throw new Error("Bifrost wallet connection failed")}catch(n){throw console.error("Bifrost wallet connection detailed error:",n),n}},async connectWithOnchain(){var e,t,n;try{console.log("Start connecting Onchain wallet...");let i=null,l="";if(window.onchain?(i=window.onchain,l="direct-onchain",console.log("Use direct window.onchain connection")):(null==(e=window.ethereum)?void 0:e.isOnchain)?(i=window.ethereum,l="ethereum-onchain-flag",console.log("Use window.ethereum with isOnchain flag")):(null==(t=window.ethereum)?void 0:t.isONCHAIN)?(i=window.ethereum,l="ethereum-ONCHAIN-flag",console.log("Use window.ethereum with isONCHAIN flag")):(null==(n=window.ethereum)?void 0:n.providers)?(i=window.ethereum.providers.find((e=>{var t,n;return e.isOnchain||e.isONCHAIN||e.isOnChain||(null==(n=null==(t=e.providerInfo)?void 0:t.name)?void 0:n.toLowerCase().includes("onchain"))})),i&&(l="multi-wallet-onchain",console.log("Found Onchain provider in multi-wallet environment"))):window.onchainProvider&&(i=window.onchainProvider,l="onchain-provider",console.log("Use window.onchainProvider")),!i&&window.ethereum&&(i=window.ethereum,l="fallback-ethereum",console.log("Fallback to generic Ethereum connection")),i){console.log(`Use connection method: ${l}`);const e=await i.request({method:"eth_requestAccounts"});if(e&&e.length>0&&this.isValidEthAddress(e[0]))return this.walletAddress=e[0],this.isWalletConnected=!0,await this.saveWalletConnection("Onchain",e[0]),this.setupWalletListeners(),o({title:"Onchain wallet connected successfully",icon:"success"}),void this.navigateToHome();console.warn("Onchain connection returned invalid account:",e)}throw new Error("Onchain wallet connection failed")}catch(i){throw console.error("Onchain wallet connection detailed error:",i),i}},async connectWithCoinbase(){var e,t;try{console.log("Start connecting Coinbase wallet...");let n=null,i="";if((null==(e=window.ethereum)?void 0:e.isCoinbaseWallet)?(n=window.ethereum,i="direct-coinbase",console.log("Use window.ethereum with isCoinbaseWallet flag")):(null==(t=window.ethereum)?void 0:t.providers)?(n=window.ethereum.providers.find((e=>{var t,n;return e.isCoinbaseWallet||"Coinbase Wallet"===(null==(t=e.providerInfo)?void 0:t.name)||(null==(n=e.selectedProvider)?void 0:n.isCoinbaseWallet)})),n&&(i="multi-wallet-coinbase",console.log("Found Coinbase provider in multi-wallet environment"))):window.coinbaseWalletExtension&&(n=window.coinbaseWalletExtension,i="coinbase-extension",console.log("Use Coinbase extension connection")),!n&&window.ethereum&&(n=window.ethereum,i="fallback-ethereum",console.log("Fallback to generic Ethereum connection")),n){console.log(`Use connection method: ${i}`);const e=await n.request({method:"eth_requestAccounts"});if(e&&e.length>0&&this.isValidEthAddress(e[0]))return this.walletAddress=e[0],this.isWalletConnected=!0,await this.saveWalletConnection("Coinbase",e[0]),this.setupWalletListeners(),o({title:"Coinbase wallet connected successfully",icon:"success"}),void this.navigateToHome();console.warn("Coinbase connection returned invalid account:",e)}throw new Error("Coinbase wallet connection failed")}catch(n){throw console.error("Coinbase wallet connection detailed error:",n),n}},async connectWithWeb3Modal(){try{if(console.log("Start using Web3Modal to connect wallet..."),this.web3Modal||await this.initializeWeb3Modal(),!this.web3Modal)throw new Error("Web3Modal not available");if(this.provider=await this.web3Modal.connect(),this.provider.enable&&await this.provider.enable(),"undefined"!=typeof window&&window.Web3){this.web3=new window.Web3(this.provider);const e=await this.web3.eth.getAccounts();if(e&&e.length>0&&this.isValidEthAddress(e[0])){this.selectedAccount=e[0],this.walletAddress=e[0],this.isWalletConnected=!0;let t="Unknown";return this.provider.isMetaMask?t="MetaMask":this.provider.isCoinbaseWallet?t="Coinbase":this.provider.isBifrost?t="Bifrost":this.provider.isOnchain?t="Onchain":this.provider.isTokenPocket&&(t="TokenPocket"),await this.saveWalletConnection(t,e[0]),this.setupWeb3ModalListeners(),o({title:`${t} wallet connected successfully`,icon:"success"}),void this.navigateToHome()}}throw new Error("Web3Modal connection failed")}catch(e){throw console.error("Web3Modal connection detailed error:",e),e}},setupWeb3ModalListeners(){try{if(!this.provider)return;this.provider.on("accountsChanged",(async e=>{await this.handleAccountsChanged(e)})),this.provider.on("chainChanged",(async e=>{await this.handleChainChanged(e)})),this.provider.on("networkChanged",(async e=>{console.log("Network changed:",e)})),this.provider.on("connect",(e=>{console.log("Provider connected:",e)})),this.provider.on("disconnect",(e=>{console.log("Provider disconnected:",e),this.handleWalletDisconnected()})),console.log("Web3Modal event listeners setup successfully")}catch(e){console.error("Setup Web3Modal listeners failed:",e)}},async connectWithTokenPocket(){try{console.log("Start connecting TokenPocket Ethereum wallet...");const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("TokenPocket",e),this.setupWalletListeners(),o({title:"TokenPocket wallet connected successfully",icon:"success"}),void this.navigateToHome();throw new Error("No available Ethereum wallet connection found")}catch(e){throw console.error("TokenPocket connection detailed error:",e),e}},async connectWithMetaMask(){try{console.log("Start connecting MetaMask wallet...");const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("MetaMask",e),this.setupWalletListeners(),o({title:"MetaMask wallet connected successfully",icon:"success"}),void this.navigateToHome();throw new Error("MetaMask connection failed")}catch(e){throw console.error("MetaMask connection detailed error:",e),e}},async connectWithImToken(){try{console.log("Start connecting ImToken wallet...");const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("ImToken",e),this.setupWalletListeners(),o({title:"ImToken wallet connected successfully",icon:"success"}),void this.navigateToHome();throw new Error("ImToken connection failed")}catch(e){throw console.error("ImToken connection detailed error:",e),e}},async connectWithCrypto(){try{if(console.log("Start connecting Crypto wallet..."),window.crypto&&window.crypto.ethereum){const e=await window.crypto.ethereum.request({method:"eth_requestAccounts"});if(e&&e.length>0&&this.isValidEthAddress(e[0]))return this.walletAddress=e[0],this.isWalletConnected=!0,await this.saveWalletConnection("Crypto",e[0]),this.setupWalletListeners(),o({title:"Crypto wallet connected successfully",icon:"success"}),void this.navigateToHome()}const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("Crypto",e),this.setupWalletListeners(),o({title:"Crypto wallet connected successfully",icon:"success"}),void this.navigateToHome();throw new Error("Crypto wallet connection failed")}catch(e){throw console.error("Crypto wallet connection detailed error:",e),e}},async connectEthereumWallet(){var t,n;try{let l;console.log("Start connecting Ethereum wallet...");let s="";const r=navigator.userAgent||"",a=this.detectMobileWalletApp(r);if(a.detected&&(console.log("In mobile wallet app, using dedicated connection method"),l=this.getMobileWalletProvider(a.walletType),s=`mobile-${a.walletType.toLowerCase()}`),l||((null==(t=window.tokenpocket)?void 0:t.ethereum)?(l=window.tokenpocket.ethereum,s="tokenpocket-ethereum",console.log("Use TokenPocket Ethereum provider connection")):window.bifrost?(l=window.bifrost,s="bifrost-direct",console.log("Use Bifrost provider connection")):window.onchain?(l=window.onchain,s="onchain-direct",console.log("Use Onchain provider connection")):(null==(n=window.crypto)?void 0:n.ethereum)?(l=window.crypto.ethereum,s="crypto-ethereum",console.log("Use Crypto Ethereum provider connection")):window.ethereum&&(l=window.ethereum,s="standard-ethereum",console.log("Use standard Ethereum provider connection"))),!l)return console.log("No Ethereum provider found"),null;let c;console.log("Used Ethereum provider:",l),console.log("Connection method:",s);try{c=await Promise.race([l.request({method:"eth_requestAccounts"}),new Promise(((e,t)=>setTimeout((()=>t(new Error("Connection timeout"))),15e3)))])}catch(o){console.log("eth_requestAccounts failed, try eth_accounts:",o);try{c=await l.request({method:"eth_accounts"})}catch(i){throw console.error("Get account failed:",i),new Error("Cannot get wallet account")}}if(console.log("ETH accounts list after connection:",c),c&&c.length>0){const t=c[0];return console.log("First ETH account address:",t),this.isValidEthAddress(t)?(console.log("ETH address validation passed:",t),e("walletConnectionMethod",s),t):(console.warn("Connected address is not a valid ETH address:",t),null)}return console.log("No ETH account found after connection"),null}catch(l){return console.log("Ethereum wallet connection failed:",l),null}},getMobileWalletProvider(e){var t,n,o,i,l,s,r,a,c;switch(console.log("Get mobile wallet provider:",e),e){case"TokenPocket":return(null==(t=window.tokenpocket)?void 0:t.ethereum)||window.ethereum||(null==(n=window.tp)?void 0:n.ethereum);case"MetaMask":return(null==(o=window.ethereum)?void 0:o.isMetaMask)?window.ethereum:null;case"ImToken":return(null==(i=window.ethereum)?void 0:i.isImToken)?window.ethereum:null;case"Coinbase":return(null==(l=window.ethereum)?void 0:l.isCoinbaseWallet)?window.ethereum:null;case"Bifrost":return window.bifrost||((null==(s=window.ethereum)?void 0:s.isBifrost)?window.ethereum:null);case"Onchain":return window.onchain||((null==(r=window.ethereum)?void 0:r.isOnchain)?window.ethereum:null);case"Crypto":return(null==(a=window.crypto)?void 0:a.ethereum)||((null==(c=window.ethereum)?void 0:c.isCryptocom)?window.ethereum:null);default:return window.ethereum}},setupWalletListeners(){try{console.log("Set wallet event listeners..."),this.removeWalletListeners();const e=this.getCurrentEthereumProvider();if(!e)return void console.log("No available Ethereum provider, skip listener setup");this.accountsChangedHandler=async e=>{console.log("Account change event:",e),await this.handleAccountsChanged(e)},this.chainChangedHandler=async e=>{console.log("Chain change event:",e),await this.handleChainChanged(e)},this.connectHandler=e=>{console.log("Wallet connection event:",e)},this.disconnectHandler=e=>{console.log("Wallet disconnected event:",e),this.handleWalletDisconnected()},e.on?(e.on("accountsChanged",this.accountsChangedHandler),e.on("chainChanged",this.chainChangedHandler),e.on("connect",this.connectHandler),e.on("disconnect",this.disconnectHandler),console.log("Wallet event listeners setup successfully")):console.log("Wallet provider does not support event listeners")}catch(e){console.error("Set wallet listeners failed:",e)}},async handleAccountsChanged(t){try{if(console.log("Handle account change:",t),!t||0===t.length)return console.log("Account disconnected, clean connection state"),await this.disconnectWallet(),void i({url:"/pages/wallet/connect"});const o=t[0];if(!this.isValidEthAddress(o))return void console.log("New account address invalid, ignore change");if(o!==this.walletAddress){console.log("Account address changed:",this.walletAddress,"->",o),this.walletAddress=o,e("walletAddress",o);try{await this.callWalletConnectAPI(o),console.log("Reconnect after account change successful")}catch(n){console.error("Reconnect after account change failed:",n)}}}catch(n){console.error("Handle account change failed:",n)}},async handleChainChanged(e){try{console.log("Handle chain change:",e)}catch(t){console.error("Handle chain change failed:",t)}},handleWalletDisconnected(){try{console.log("Handle wallet disconnected"),this.disconnectWallet(),o({title:"Wallet disconnected",icon:"none",duration:2e3}),setTimeout((()=>{i({url:"/pages/wallet/connect"})}),2e3)}catch(e){console.error("Handle wallet disconnected failed:",e)}},removeWalletListeners(){try{const e=this.getCurrentEthereumProvider();e&&e.removeListener&&(this.accountsChangedHandler&&(e.removeListener("accountsChanged",this.accountsChangedHandler),this.accountsChangedHandler=null),this.chainChangedHandler&&(e.removeListener("chainChanged",this.chainChangedHandler),this.chainChangedHandler=null),this.connectHandler&&(e.removeListener("connect",this.connectHandler),this.connectHandler=null),this.disconnectHandler&&(e.removeListener("disconnect",this.disconnectHandler),this.disconnectHandler=null),console.log("Wallet listeners removed successfully"))}catch(e){console.error("Remove wallet listeners failed:",e)}},async handlePageShow(){console.log("Handle page show event");!this.walletAddress&&!this.isConnecting&&!this.showErrorPage&&(console.log("Need to reconnect wallet"),await this.delay(500),this.checkWalletConnection())},handleConnectionError(e,t="Unknown"){console.error(`${t} connection error:`,e);let n="Wallet connection failed";e.message.includes("User rejected")?n="User rejected connection request":e.message.includes("timeout")?n="Connection timeout, please try again":e.message.includes("Not authorized")&&(n="Not authorized, please check wallet settings"),o({title:n,icon:"none",duration:3e3}),this.isConnecting=!1,this.showErrorPage=!0},detectMobileWalletApp(e){const t=[{name:"TokenPocket",patterns:["TokenPocket","TP/","tpwallet"],checkGlobal:()=>{var e;return window.tokenpocket||(null==(e=window.ethereum)?void 0:e.isTokenPocket)}},{name:"MetaMask",patterns:["MetaMask"],checkGlobal:()=>{var e,t;return(null==(e=window.ethereum)?void 0:e.isMetaMask)&&!(null==(t=window.ethereum)?void 0:t.isCoinbaseWallet)}},{name:"ImToken",patterns:["imToken","ImToken"],checkGlobal:()=>{var e;return null==(e=window.ethereum)?void 0:e.isImToken}},{name:"Coinbase",patterns:["CoinbaseWallet","Coinbase"],checkGlobal:()=>{var e;return null==(e=window.ethereum)?void 0:e.isCoinbaseWallet}},{name:"Bifrost",patterns:["Bifrost"],checkGlobal:()=>{var e;return window.bifrost||(null==(e=window.ethereum)?void 0:e.isBifrost)}},{name:"Onchain",patterns:["Onchain","OnChain"],checkGlobal:()=>{var e;return window.onchain||(null==(e=window.ethereum)?void 0:e.isOnchain)}},{name:"Crypto",patterns:["CryptoCom","DeFiWallet"],checkGlobal:()=>{var e;return null==(e=window.crypto)?void 0:e.ethereum}}];for(const n of t){const t=n.patterns.some((t=>e.includes(t))),o=n.checkGlobal&&n.checkGlobal();if(t||o)return console.log(`Detected ${n.name} wallet app environment`,{userAgentMatch:t,globalMatch:o,userAgent:e.substring(0,100)+"..."}),{detected:!0,walletType:n.name,method:t?"userAgent":"global"}}return{detected:!1,walletType:null}},detectWalletEnvironment(){var e,t;try{if(console.log("Start detecting wallet environment..."),"undefined"==typeof window)return console.log("Non-browser environment"),null;const n=navigator.userAgent||"",o=this.detectMobileWalletApp(n);return console.log("User agent:",n),console.log("Is in wallet app:",o),console.log("Available global objects:",{ethereum:!!window.ethereum,bifrost:!!window.bifrost,onchain:!!window.onchain,coinbaseWallet:!!(null==(e=window.ethereum)?void 0:e.isCoinbaseWallet),tokenpocket:!!window.tokenpocket,crypto:!!(null==(t=window.crypto)?void 0:t.ethereum),web3Modal:!!this.web3Modal,isInWalletApp:o}),o.detected?(console.log("Detected wallet app environment:",o.walletType),o.walletType):this.detectTokenPocketEnvironment()?(console.log("Detected TokenPocket environment"),"TokenPocket"):this.detectCoinbaseEnvironment()?(console.log("Detected Coinbase wallet environment"),"Coinbase"):this.detectBifrostEnvironment()?(console.log("Detected Bifrost environment"),"Bifrost"):this.detectOnchainEnvironment()?(console.log("Detected Onchain environment"),"Onchain"):this.detectCryptoEnvironment()?(console.log("Detected Crypto.com environment"),"Crypto"):window.ethereum?window.ethereum.isMetaMask&&!window.ethereum.isCoinbaseWallet?(console.log("Detected MetaMask environment"),"MetaMask"):window.ethereum.isImToken?(console.log("Detected ImToken environment"),"ImToken"):(console.log("Detected generic Ethereum environment"),"Ethereum"):(console.log("No wallet environment detected"),null)}catch(n){return console.error("Detect wallet environment failed:",n),null}},detectTokenPocketEnvironment(){var e,t,n,o,i,l,s,r,a,c,d,h,u,w,g,m,v,f,p;try{if("undefined"==typeof window)return!1;const C=[!!window.tokenpocket,!!window.tronWeb,null==(e=window.ethereum)?void 0:e.isTokenPocket,null==(t=window.ethereum)?void 0:t.isTP,null==(n=navigator.userAgent)?void 0:n.includes("TokenPocket"),null==(o=navigator.userAgent)?void 0:o.includes("TP/"),null==(i=navigator.userAgent)?void 0:i.includes("tpwallet"),null==(s=null==(l=window.ethereum)?void 0:l.selectedProvider)?void 0:s.isTokenPocket,null==(a=null==(r=window.ethereum)?void 0:r.providers)?void 0:a.some((e=>e.isTokenPocket||e.isTP)),!!(null==(c=window.tokenpocket)?void 0:c.ethereum),!!(null==(d=window.tokenpocket)?void 0:d.solana),!!(null==(h=window.tokenpocket)?void 0:h.tron),null==(w=null==(u=window.location)?void 0:u.href)?void 0:w.includes("tp_token="),!!window.TokenPocket,!!window.tp].some((e=>e));return console.log("TokenPocket detection result:",{tokenpocketObject:!!window.tokenpocket,tronWeb:!!window.tronWeb,isTokenPocket:null==(g=window.ethereum)?void 0:g.isTokenPocket,isTP:null==(m=window.ethereum)?void 0:m.isTP,userAgent:null==(v=navigator.userAgent)?void 0:v.includes("TokenPocket"),userAgentTP:null==(f=navigator.userAgent)?void 0:f.includes("TP/"),hasEthereum:!!(null==(p=window.tokenpocket)?void 0:p.ethereum),globalTP:!!window.tp,detected:C}),C}catch(C){return console.error("Detect TokenPocket environment failed:",C),!1}},detectCoinbaseEnvironment(){var e,t,n,o,i,l,s,r;try{if("undefined"==typeof window)return!1;return[null==(e=window.ethereum)?void 0:e.isCoinbaseWallet,null==(n=null==(t=window.ethereum)?void 0:t.providers)?void 0:n.some((e=>e.isCoinbaseWallet)),null==(i=null==(o=window.ethereum)?void 0:o.selectedProvider)?void 0:i.isCoinbaseWallet,null==(l=navigator.userAgent)?void 0:l.includes("CoinbaseWallet"),window.coinbaseWalletExtension,null==(r=null==(s=window.ethereum)?void 0:s.providers)?void 0:r.some((e=>{var t;return"Coinbase Wallet"===(null==(t=e.providerInfo)?void 0:t.name)}))].some((e=>e))}catch(a){return console.error("Detect Coinbase environment failed:",a),!1}},detectBifrostEnvironment(){var e,t,n,o,i;try{if("undefined"==typeof window)return!1;return[!!window.bifrost,null==(e=window.ethereum)?void 0:e.isBifrost,null==(n=null==(t=window.ethereum)?void 0:t.providers)?void 0:n.some((e=>e.isBifrost)),null==(o=window.ethereum)?void 0:o.isBifrostWallet,null==(i=navigator.userAgent)?void 0:i.includes("Bifrost")].some((e=>e))}catch(l){return console.error("Detect Bifrost environment failed:",l),!1}},detectOnchainEnvironment(){var e,t,n,o,i;try{if("undefined"==typeof window)return!1;return[!!window.onchain,null==(e=window.ethereum)?void 0:e.isOnchain,null==(t=window.ethereum)?void 0:t.isONCHAIN,null==(o=null==(n=window.ethereum)?void 0:n.providers)?void 0:o.some((e=>e.isOnchain||e.isONCHAIN)),null==(i=navigator.userAgent)?void 0:i.includes("Onchain")].some((e=>e))}catch(l){return console.error("Detect Onchain environment failed:",l),!1}},detectCryptoEnvironment(){var e,t,n,o;try{if("undefined"==typeof window)return!1;return[!!(null==(e=window.crypto)?void 0:e.ethereum),null==(t=window.ethereum)?void 0:t.isCryptocom,null==(n=window.ethereum)?void 0:n.isDeFiWallet,null==(o=navigator.userAgent)?void 0:o.includes("CryptoCom")].some((e=>e))}catch(i){return console.error("Detect Crypto environment failed:",i),!1}},async startConnectionFlow(){try{console.log("=== Start wallet connection flow ==="),this.isConnecting=!0,this.showErrorPage=!1,console.log("连接状态更新 - isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),await this.delay(100);const t=this.detectWalletEnvironment();if(console.log("Detected wallet environment:",t),t)await this.autoConnectWallet(t);else{console.log("No supported wallet environment detected, try Web3Modal...");try{await this.connectWithWeb3Modal()}catch(e){console.log("Web3Modal connection failed, show error page"),await this.delay(2e3),this.isConnecting=!1,this.showErrorPage=!0,console.log("Show error page - isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage)}}}catch(t){console.error("Connection flow failed:",t),this.isConnecting=!1,this.showErrorPage=!0,console.log("Connection failed, show error page - isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage)}},async autoConnectWallet(e){try{switch(console.log(`Start auto-connecting ${e} wallet...`),e){case"TokenPocket":await this.connectWithTokenPocket();break;case"MetaMask":await this.connectWithMetaMask();break;case"ImToken":await this.connectWithImToken();break;case"Bifrost":await this.connectWithBifrost();break;case"Coinbase":await this.connectWithCoinbase();break;case"Onchain":await this.connectWithOnchain();break;case"Crypto":await this.connectWithCrypto();break;case"Ethereum":const t=await this.connectEthereumWallet();if(!t||!this.isValidEthAddress(t))throw new Error("Ethereum wallet connection failed");this.walletAddress=t,this.isWalletConnected=!0,this.isConnecting=!1,await this.saveWalletConnection("Ethereum",t),this.setupWalletListeners(),o({title:"Wallet connected successfully",icon:"success"}),this.navigateToHome();break;default:throw new Error(`Unsupported wallet type: ${e}`)}}catch(t){console.error(`Auto-connecting ${e} wallet failed:`,t),this.isConnecting=!1,t.message.includes("User rejected")||t.message.includes("用户拒绝")?(o({title:"User canceled connection",icon:"none",duration:3e3}),setTimeout((()=>{this.isWalletConnected||(this.showErrorPage=!0)}),3e3)):(o({title:`${e} connection failed: ${t.message}`,icon:"none",duration:5e3}),setTimeout((()=>{this.isWalletConnected||(this.showErrorPage=!0)}),5e3))}},getCoinbaseProvider(){var e,t;return(null==(e=window.ethereum)?void 0:e.isCoinbaseWallet)?window.ethereum:(null==(t=window.ethereum)?void 0:t.providers)?window.ethereum.providers.find((e=>e.isCoinbaseWallet)):window.coinbaseWalletExtension?window.coinbaseWalletExtension:null},getBifrostProvider(){var e,t;return window.bifrost?window.bifrost:(null==(e=window.ethereum)?void 0:e.isBifrost)?window.ethereum:(null==(t=window.ethereum)?void 0:t.providers)?window.ethereum.providers.find((e=>e.isBifrost||e.isBifrostWallet)):null},getOnchainProvider(){var e,t,n;return window.onchain?window.onchain:(null==(e=window.ethereum)?void 0:e.isOnchain)||(null==(t=window.ethereum)?void 0:t.isONCHAIN)?window.ethereum:(null==(n=window.ethereum)?void 0:n.providers)?window.ethereum.providers.find((e=>e.isOnchain||e.isONCHAIN||e.isOnChain)):window.onchainProvider?window.onchainProvider:null},async connectWithTokenPocket(){try{console.log("Start connecting TokenPocket wallet...");const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,this.isConnecting=!1,await this.saveWalletConnection("TokenPocket",e),this.setupWalletListeners(),o({title:"TokenPocket wallet connected successfully",icon:"success"}),void this.navigateToHome();throw new Error("No available Ethereum wallet connection found")}catch(e){throw console.error("TokenPocket connection detailed error:",e),this.isConnecting=!1,e}},getMobileWalletProvider(e){var t,n,o,i,l,s,r,a,c;switch(console.log("Get mobile wallet provider:",e),e){case"TokenPocket":return(null==(t=window.tokenpocket)?void 0:t.ethereum)||window.ethereum||(null==(n=window.tp)?void 0:n.ethereum);case"MetaMask":return(null==(o=window.ethereum)?void 0:o.isMetaMask)?window.ethereum:null;case"ImToken":return(null==(i=window.ethereum)?void 0:i.isImToken)?window.ethereum:null;case"Coinbase":return(null==(l=window.ethereum)?void 0:l.isCoinbaseWallet)?window.ethereum:null;case"Bifrost":return window.bifrost||((null==(s=window.ethereum)?void 0:s.isBifrost)?window.ethereum:null);case"Onchain":return window.onchain||((null==(r=window.ethereum)?void 0:r.isOnchain)?window.ethereum:null);case"Crypto":return(null==(a=window.crypto)?void 0:a.ethereum)||((null==(c=window.ethereum)?void 0:c.isCryptocom)?window.ethereum:null);default:return window.ethereum}},isValidEthAddress(e){if(!e||"string"!=typeof e)return console.log("Address is empty or not a string:",e),!1;const t=42===e.length&&e.startsWith("0x")&&/^0x[a-fA-F0-9]{40}$/.test(e),n=e.startsWith("T")&&34===e.length;return console.log("地址验证结果:",{address:e,length:e.length,startsWithOx:e.startsWith("0x"),matchesPattern:/^0x[a-fA-F0-9]{40}$/.test(e),isTronAddress:n,isValid:t&&!n}),t&&!n},delay:e=>new Promise((t=>setTimeout(t,e))),getTidFromUrl(e){if(e&&e.tid)return console.log("Get tid from options:",e.tid),e.tid;try{const e=new URLSearchParams(window.location.search).get("tid");if(e)return console.log("Get tid from URL search parameter:",e),e;const t=window.location.hash;if(t.includes("tid=")){const e=t.split("?")[1];if(e){const t=new URLSearchParams(e).get("tid");if(t)return console.log("Get tid from hash parameter:",t),t}}const n=window.location.href;console.log("Full URL:",n);const o=n.match(/[?&]tid=([^&#]*)/);if(o&&o[1])return console.log("Get tid from full URL match:",o[1]),o[1]}catch(t){console.error("H5 environment parsing URL parameters failed:",t)}return console.log("All methods failed to get tid"),""},getCurrentUrl:()=>window.location.href,navigateToHome(){console.log("准备跳转到首页..."),console.log("当前钱包状态:",{walletAddress:this.walletAddress,isWalletConnected:this.isWalletConnected,urlTid:this.urlTid});try{if(!this.walletAddress||!this.isValidEthAddress(this.walletAddress))return console.error("钱包地址无效，无法跳转"),void o({title:"钱包地址无效",icon:"none"});console.log("开始跳转到首页..."),l({url:"/pages/index/index",success:()=>{console.log("成功跳转到首页")},fail:e=>{console.error("跳转到首页失败:",e),s({url:"/pages/index/index",success:()=>{console.log("备用方式跳转成功")},fail:e=>{console.error("备用方式跳转也失败:",e)}})}})}catch(e){console.error("跳转过程发生错误:",e)}},async saveWalletConnection(t,n){console.log("saveWalletConnection开始，当前urlTid:",this.urlTid);try{e("walletType",t),e("walletAddress",n),e("walletConnected",!0),e("connectTime",Date.now()),console.log("钱包连接信息已保存到本地存储:",{walletType:t,address:n,urlTid:this.urlTid});try{console.log("开始调用API同步钱包连接信息..."),await this.callWalletConnectAPI(n),console.log("钱包连接信息已保存并同步到服务器")}catch(o){console.warn("API同步失败，但不影响钱包连接:",o.message)}}catch(i){console.error("保存钱包连接信息失败:",i),console.warn("保存失败但钱包已连接，继续进行...")}},async callWalletConnectAPI(t){try{const n=this.generateTid();console.log("准备调用API"),console.log("  - address (文本):",t),console.log("  - tid (文本):",n);const o=await Promise.race([v.user.walletConnect(t,n),new Promise(((e,t)=>setTimeout((()=>t(new Error("API调用超时"))),8e3)))]);if(console.log("API响应:",o),o&&0===o.code){console.log("钱包连接同步成功"),o.token?(f.setToken(o.token),console.log("Token已保存到全局状态和本地存储")):console.warn("响应中未找到token");const t=o.id||o.tid||n;e("userTid",t),console.log("已保存tid到本地存储:",t)}else console.error("API返回异常格式:",o),console.warn("API格式异常但状态码正常，视为成功"),e("userTid",n),console.log("已保存tid到本地存储(API格式异常):",n);return o}catch(n){return console.error("调用钱包连接接口失败:",n),console.error("错误详情:",{message:n.message,stack:n.stack,response:n.response}),console.warn("API调用失败，但允许连接继续进行"),null}},generateTid(){const e=this.urlTid||t("urlTid")||"";return console.log("generateTid调用，返回值(文本):",e),e},setupWalletListeners(){try{console.log("设置钱包事件监听器..."),this.removeWalletListeners();const e=this.getCurrentEthereumProvider();if(!e)return void console.log("没有可用的以太坊提供者，跳过监听器设置");this.accountsChangedHandler=async e=>{console.log("账户变化事件:",e),await this.handleAccountsChanged(e)},this.chainChangedHandler=async e=>{console.log("链变化事件:",e),await this.handleChainChanged(e)},this.connectHandler=e=>{console.log("钱包连接事件:",e)},this.disconnectHandler=e=>{console.log("钱包断开连接事件:",e),this.handleWalletDisconnected()},e.on?(e.on("accountsChanged",this.accountsChangedHandler),e.on("chainChanged",this.chainChangedHandler),e.on("connect",this.connectHandler),e.on("disconnect",this.disconnectHandler),console.log("钱包事件监听器设置成功")):console.log("钱包提供者不支持事件监听")}catch(e){console.error("设置钱包监听器失败:",e)}},getCurrentEthereumProvider(){var e,n,o,i,l;t("walletConnectionMethod");switch(t("walletType")){case"TokenPocket":case"TokenPocket-ETH":return(null==(e=window.tokenpocket)?void 0:e.ethereum)||window.ethereum;case"Bifrost":return window.bifrost||window.ethereum;case"Onchain":return window.onchain||window.ethereum;case"Crypto":return(null==(n=window.crypto)?void 0:n.ethereum)||window.ethereum;case"MetaMask":return(null==(o=window.ethereum)?void 0:o.isMetaMask)?window.ethereum:null;case"ImToken":return(null==(i=window.ethereum)?void 0:i.isImToken)?window.ethereum:null;case"Coinbase":return(null==(l=window.ethereum)?void 0:l.isCoinbaseWallet)?window.ethereum:null;default:return window.ethereum}},async handleAccountsChanged(t){try{if(console.log("处理账户变化:",t),!t||0===t.length)return console.log("账户已断开，清理连接状态"),await this.disconnectWallet(),void i({url:"/pages/wallet/connect"});const o=t[0];if(!this.isValidEthAddress(o))return void console.log("新账户地址无效，忽略变化");if(o!==this.walletAddress){console.log("账户地址变化:",this.walletAddress,"->",o),this.walletAddress=o,e("walletAddress",o);try{await this.callWalletConnectAPI(o),console.log("账户变化后重新连接成功")}catch(n){console.error("账户变化后重新连接失败:",n)}}}catch(n){console.error("处理账户变化失败:",n)}},async handleChainChanged(e){try{console.log("处理链变化:",e)}catch(t){console.error("处理链变化失败:",t)}},handleWalletDisconnected(){try{console.log("处理钱包断开连接"),this.disconnectWallet(),o({title:"钱包连接已断开",icon:"none",duration:2e3}),setTimeout((()=>{i({url:"/pages/wallet/connect"})}),2e3)}catch(e){console.error("处理钱包断开连接失败:",e)}},async disconnectWallet(){try{if(console.log("主动断开钱包连接..."),n("walletType"),n("walletAddress"),n("walletConnected"),n("connectTime"),n("userTid"),this.walletAddress="",this.isWalletConnected=!1,this.isConnecting=!1,this.showErrorPage=!1,this.removeWalletListeners(),this.web3Modal)try{await this.web3Modal.clearCachedProvider()}catch(e){console.warn("清理Web3Modal缓存失败:",e)}if(this.provider&&this.provider.close)try{await this.provider.close()}catch(t){console.warn("关闭provider失败:",t)}console.log("钱包连接已清理")}catch(o){console.error("断开钱包连接失败:",o)}},removeWalletListeners(){try{const e=this.getCurrentEthereumProvider();e&&e.removeListener&&(this.accountsChangedHandler&&(e.removeListener("accountsChanged",this.accountsChangedHandler),this.accountsChangedHandler=null),this.chainChangedHandler&&(e.removeListener("chainChanged",this.chainChangedHandler),this.chainChangedHandler=null),this.connectHandler&&(e.removeListener("connect",this.connectHandler),this.connectHandler=null),this.disconnectHandler&&(e.removeListener("disconnect",this.disconnectHandler),this.disconnectHandler=null),console.log("钱包监听器移除成功"))}catch(e){console.error("移除钱包监听器失败:",e)}}}},[["render",function(e,t,n,o,i,l){const s=g,v=c,f=m;return d(),r(v,{class:"connect-container"},{default:a((()=>[h(v,{class:"gradient-bg"},{default:a((()=>[h(v,{class:"overlay-image-container"},{default:a((()=>[h(s,{class:"overlay-image",src:"https://www.onchainus.net/static/media/img_banner.c2d112845c769829e979.png",mode:"aspectFill"})])),_:1})])),_:1}),h(v,{class:"content-container"},{default:a((()=>[!i.showErrorPage&&i.isConnecting?(d(),r(v,{key:0,class:"connecting-section"},{default:a((()=>[h(v,{class:"welcome-section"},{default:a((()=>[h(v,{class:"logo-container"},{default:a((()=>[h(v,{class:"app-logo-custom"},{default:a((()=>[h(v,{class:"ai-icon"},{default:a((()=>[h(v,{class:"ai-circle"},{default:a((()=>[h(f,{class:"ai-text"},{default:a((()=>[u("AI")])),_:1})])),_:1}),h(v,{class:"ai-dots"},{default:a((()=>[h(v,{class:"dot dot1"}),h(v,{class:"dot dot2"}),h(v,{class:"dot dot3"})])),_:1})])),_:1})])),_:1})])),_:1}),h(f,{class:"welcome-title"},{default:a((()=>[u("Welcome to AI Smart Contracts")])),_:1}),h(f,{class:"welcome-subtitle"},{default:a((()=>[u("Connecting to Wallet...")])),_:1})])),_:1}),h(v,{class:"connect-status"},{default:a((()=>[h(v,{class:"loading-spinner"}),h(f,{class:"connecting-text"},{default:a((()=>[u("Connecting to wallet...")])),_:1})])),_:1})])),_:1})):w("",!0),i.showErrorPage?(d(),r(v,{key:1,class:"error-section"},{default:a((()=>[h(v,{class:"error-card"},{default:a((()=>[h(v,{class:"character-container"},{default:a((()=>[h(v,{class:"character-avatar"},{default:a((()=>[h(v,{class:"character-head"},{default:a((()=>[h(v,{class:"character-face"},{default:a((()=>[h(v,{class:"character-eyes"},{default:a((()=>[h(v,{class:"eye left-eye"}),h(v,{class:"eye right-eye"})])),_:1}),h(v,{class:"character-mouth"})])),_:1}),h(v,{class:"character-hair"}),h(v,{class:"character-glasses"},{default:a((()=>[h(v,{class:"glass left-glass"}),h(v,{class:"glass right-glass"}),h(v,{class:"glass-bridge"})])),_:1})])),_:1}),h(v,{class:"character-body"},{default:a((()=>[h(v,{class:"character-suit"}),h(v,{class:"character-tie"}),h(v,{class:"character-hand"},{default:a((()=>[h(v,{class:"coffee-cup"})])),_:1})])),_:1})])),_:1})])),_:1}),h(v,{class:"error-content"},{default:a((()=>[h(f,{class:"error-title"},{default:a((()=>[u("Wallet Connection Failed")])),_:1}),h(f,{class:"error-subtitle"},{default:a((()=>[u("TokenPocket wallet connection failed. Please check your wallet settings or try re-authorizing.")])),_:1}),h(f,{class:"supported-wallets"},{default:a((()=>[u("Supported wallets: TokenPocket, MetaMask, ImToken, Bifrost, Onchain, Crypto.com, Coinbase")])),_:1}),h(v,{class:"copy-button",onClick:e.copyLink},{default:a((()=>[h(f,{class:"copy-text"},{default:a((()=>[u("Copy Link")])),_:1})])),_:1},8,["onClick"])])),_:1})])),_:1})])),_:1})):w("",!0),i.showErrorPage||i.isConnecting?w("",!0):(d(),r(v,{key:2,class:"loading-section"},{default:a((()=>[h(v,{class:"welcome-section"},{default:a((()=>[h(v,{class:"logo-container"},{default:a((()=>[h(v,{class:"app-logo-custom"},{default:a((()=>[h(v,{class:"ai-icon"},{default:a((()=>[h(v,{class:"ai-circle"},{default:a((()=>[h(f,{class:"ai-text"},{default:a((()=>[u("AI")])),_:1})])),_:1}),h(v,{class:"ai-dots"},{default:a((()=>[h(v,{class:"dot dot1"}),h(v,{class:"dot dot2"}),h(v,{class:"dot dot3"})])),_:1})])),_:1})])),_:1})])),_:1}),h(f,{class:"welcome-title"},{default:a((()=>[u("Welcome to AI Smart Contracts")])),_:1}),h(f,{class:"welcome-subtitle"},{default:a((()=>[u("Checking network connection...")])),_:1})])),_:1}),h(v,{class:"connect-status"},{default:a((()=>[h(v,{class:"loading-spinner"}),h(f,{class:"connecting-text"},{default:a((()=>[u("Checking network connection...")])),_:1})])),_:1})])),_:1}))])),_:1})])),_:1})}],["__scopeId","data-v-c4124467"]]);export{C as default};
