import{s as e,g as t,r as o,a as n,b as s,c as l,d as c,w as i,i as a,o as r,e as d,f as h,h as w,j as u,k as g}from"./index-BF2xuFCt.js";import{a as f,s as m}from"./api.dEvbFdfM.js";import{_ as C}from"./_plugin-vue_export-helper.BCo6x5W8.js";const p=C({data:()=>({isConnecting:!1,showErrorPage:!1,walletAddress:"",currentUrl:"",urlTid:"",isWalletConnected:!1,accountsChangedHandler:null,chainChangedHandler:null,connectHandler:null,disconnectHandler:null}),async onLoad(t){console.log("Current full URL:",window.location.href),console.log("URL search part:",window.location.search),console.log("URL hash part:",window.location.hash),this.urlTid=this.getTidFromUrl(t),console.log("tid obtained from URL:",this.urlTid),console.log("onLoad received options:",t),this.urlTid&&e("urlTid",this.urlTid),this.urlTid?(this.currentUrl=this.getCurrentUrl(),await this.delay(100),await this.checkWalletConnection()):this.showInviteCodeError()},methods:{async checkWalletConnection(){console.log("=== Start checking wallet connection status ===");const e=t("walletAddress"),n=t("walletType");if(console.log("Local storage wallet address:",e),console.log("Local storage wallet type:",n),console.log("Is valid ETH address:",this.isValidEthAddress(e)),!e||this.isValidEthAddress(e)&&"TokenPocket-ETH"===n||(console.log("Clear local storage non-TokenPocket ETH address:",e,n),o("walletAddress"),o("walletType"),o("walletConnected")),e&&this.isValidEthAddress(e)&&"TokenPocket-ETH"===n)return this.walletAddress=e,this.isWalletConnected=!0,console.log("Use local storage TokenPocket ETH wallet address:",e),this.setupWalletListeners(),void this.navigateToHome();const s=await this.checkActiveWalletConnection();return console.log("Detected active wallet address:",s),console.log("Is valid ETH address:",this.isValidEthAddress(s)),"unsupported_wallet"===s?(console.log("Detected unsupported wallet, showing error page"),void this.startConnectionFlow()):s&&this.isValidEthAddress(s)?(await this.saveWalletConnection("TokenPocket-ETH",s),this.walletAddress=s,this.isWalletConnected=!0,console.log("Use detected TokenPocket ETH wallet address:",s),this.setupWalletListeners(),void this.navigateToHome()):(console.log("No valid TokenPocket ETH wallet connection found, start connection process"),void this.startConnectionFlow())},setupWalletListeners(){try{console.log("Set wallet event listener...");let e=this.getEthereumProvider();if(!e)return void console.log("No Ethereum provider found, cannot set listener");this.removeWalletListeners(),this.accountsChangedHandler=e=>{console.log("Detected account change:",e),this.handleAccountsChanged(e)},this.chainChangedHandler=e=>{console.log("Detected chain change:",e),this.handleChainChanged(e)},this.connectHandler=e=>{console.log("Detected connection:",e),this.handleConnect(e)},this.disconnectHandler=e=>{console.log("Detected disconnection:",e),this.handleDisconnect(e)},e.on("accountsChanged",this.accountsChangedHandler),e.on("chainChanged",this.chainChangedHandler),e.on("connect",this.connectHandler),e.on("disconnect",this.disconnectHandler),console.log("Wallet event listener set successfully")}catch(e){console.error("Failed to set wallet listener:",e)}},removeWalletListeners(){try{let e=this.getEthereumProvider();e&&this.accountsChangedHandler&&(e.removeListener("accountsChanged",this.accountsChangedHandler),e.removeListener("chainChanged",this.chainChangedHandler),e.removeListener("connect",this.connectHandler),e.removeListener("disconnect",this.disconnectHandler),console.log("Wallet event listener removed"))}catch(e){console.error("Failed to remove wallet listener:",e)}},getEthereumProvider:()=>"undefined"==typeof window?null:window.tokenpocket&&window.tokenpocket.ethereum?window.tokenpocket.ethereum:window.bifrost?window.bifrost:window.onchain?window.onchain:window.crypto&&window.crypto.ethereum?window.crypto.ethereum:window.ethereum?window.ethereum:null,async handleAccountsChanged(t){try{if(console.log("=== Handle account change ==="),console.log("New account list:",t),0===t.length)console.log("User disconnected all accounts"),await this.handleWalletDisconnected();else{const s=t[0];if(console.log("User switched to new account:",s),this.isValidEthAddress(s))if(s!==this.walletAddress){console.log("Account switched from",this.walletAddress,"to",s),this.walletAddress=s,e("walletAddress",s);try{await this.callWalletConnectAPI(s),console.log("New wallet address synchronized to server")}catch(o){console.warn("API synchronization failed, but does not affect wallet switching:",o.message)}n({title:`Wallet switched to ${this.formatWalletAddress(s)}`,icon:"success",duration:3e3})}else console.log("Account address unchanged, no update needed");else console.warn("New account is not a valid ETH address:",s),n({title:"Detected non-ETH account, please switch to ETH account",icon:"none",duration:3e3})}}catch(s){console.error("Handle account change failed:",s),n({title:"Wallet switching failed",icon:"none"})}},handleChainChanged(e){console.log("=== Handle chain change ==="),console.log("New chain ID:",e),n({title:`Network switched to ${e}`,icon:"success",duration:2e3})},handleConnect(e){console.log("=== Handle wallet connection ==="),console.log("Connection information:",e)},async handleDisconnect(e){console.log("=== Handle wallet disconnection ==="),console.log("Disconnection error:",e),await this.handleWalletDisconnected()},async handleWalletDisconnected(){try{console.log("Wallet disconnected, cleaning state..."),o("walletType"),o("walletAddress"),o("walletConnected"),o("connectTime"),o("userTid"),this.walletAddress="",this.isWalletConnected=!1,this.isConnecting=!1,this.showErrorPage=!1,this.removeWalletListeners(),n({title:"Wallet disconnected",icon:"none",duration:2e3}),setTimeout((()=>{this.startConnectionFlow()}),2e3)}catch(e){console.error("Handle wallet disconnection failed:",e)}},isValidEthAddress(e){if(!e||"string"!=typeof e)return console.log("Address is empty or not a string:",e),!1;const t=42===e.length&&e.startsWith("0x")&&/^0x[a-fA-F0-9]{40}$/.test(e),o=e.startsWith("T")&&34===e.length;return console.log("Address validation result:",{address:e,length:e.length,startsWithOx:e.startsWith("0x"),matchesPattern:/^0x[a-fA-F0-9]{40}$/.test(e),isTronAddress:o,isValid:t&&!o}),t&&!o},formatWalletAddress:e=>e?e.length<=10?e:`${e.slice(0,6)}...${e.slice(-4)}`:"",async disconnectWallet(){try{if(console.log("=== Start disconnecting wallet ==="),this.removeWalletListeners(),o("walletType"),o("walletAddress"),o("walletConnected"),o("connectTime"),o("userTid"),this.walletAddress="",this.isWalletConnected=!1,this.isConnecting=!1,this.showErrorPage=!1,console.log("状态重置完成 - walletAddress:",this.walletAddress,"isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),"undefined"!=typeof window){try{window.ethereum&&window.ethereum.disconnect&&await window.ethereum.disconnect()}catch(e){console.log("Failed to disconnect Ethereum connection:",e)}try{window.tokenpocket&&window.tokenpocket.disconnect&&await window.tokenpocket.disconnect()}catch(e){console.log("Failed to disconnect TokenPocket connection:",e)}}console.log("Wallet connection disconnected")}catch(e){throw console.error("Failed to disconnect wallet:",e),e}},async connectWithTokenPocket(){try{console.log("Start connecting TokenPocket Ethereum wallet...");const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("TokenPocket-ETH",e),this.setupWalletListeners(),n({title:"TokenPocket Ethereum wallet connected successfully",icon:"success"}),void setTimeout((()=>{this.navigateToHome()}),1500);throw new Error("No available Ethereum wallet connection found")}catch(e){throw console.error("TokenPocket ETH connection detailed error:",e),e}},async connectWithMetaMask(){try{console.log("Start connecting MetaMask wallet...");const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("MetaMask",e),this.setupWalletListeners(),n({title:"MetaMask wallet connected successfully",icon:"success"}),void setTimeout((()=>{this.navigateToHome()}),1500);throw new Error("MetaMask connection failed")}catch(e){throw console.error("MetaMask connection detailed error:",e),e}},async connectWithImToken(){try{console.log("Start connecting ImToken wallet...");const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("ImToken",e),n({title:"ImToken wallet connected successfully",icon:"success"}),this.isConnecting=!1,console.log("ImToken connected successfully - walletAddress:",this.walletAddress,"isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),void this.$forceUpdate();throw new Error("ImToken connection failed")}catch(e){throw console.error("ImToken connection detailed error:",e),e}},async connectWithBifrost(){try{if(console.log("Start connecting Bifrost wallet..."),window.bifrost){const e=await window.bifrost.request({method:"eth_requestAccounts"});if(e&&e.length>0&&this.isValidEthAddress(e[0]))return this.walletAddress=e[0],this.isWalletConnected=!0,await this.saveWalletConnection("Bifrost",e[0]),n({title:"Bifrost wallet connected successfully",icon:"success"}),this.isConnecting=!1,console.log("Bifrost connected successfully - walletAddress:",this.walletAddress,"isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),void this.$forceUpdate()}const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("Bifrost",e),n({title:"Bifrost wallet connected successfully",icon:"success"}),this.isConnecting=!1,console.log("Bifrost connected successfully - walletAddress:",this.walletAddress,"isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),void this.$forceUpdate();throw new Error("Bifrost connection failed")}catch(e){throw console.error("Bifrost connection detailed error:",e),e}},async connectWithOnchain(){try{if(console.log("Start connecting Onchain wallet..."),window.onchain){const e=await window.onchain.request({method:"eth_requestAccounts"});if(e&&e.length>0&&this.isValidEthAddress(e[0]))return this.walletAddress=e[0],this.isWalletConnected=!0,await this.saveWalletConnection("Onchain",e[0]),n({title:"Onchain wallet connected successfully",icon:"success"}),this.isConnecting=!1,console.log("Onchain connected successfully - walletAddress:",this.walletAddress,"isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),void this.$forceUpdate()}const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("Onchain",e),n({title:"Onchain wallet connected successfully",icon:"success"}),this.isConnecting=!1,console.log("Onchain connected successfully - walletAddress:",this.walletAddress,"isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),void this.$forceUpdate();throw new Error("Onchain connection failed")}catch(e){throw console.error("Onchain connection detailed error:",e),e}},async connectWithCrypto(){try{if(console.log("Start connecting Crypto wallet..."),window.crypto&&window.crypto.ethereum){const e=await window.crypto.ethereum.request({method:"eth_requestAccounts"});if(e&&e.length>0&&this.isValidEthAddress(e[0]))return this.walletAddress=e[0],this.isWalletConnected=!0,await this.saveWalletConnection("Crypto",e[0]),n({title:"Crypto wallet connected successfully",icon:"success"}),this.isConnecting=!1,console.log("Crypto connected successfully - walletAddress:",this.walletAddress,"isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),void this.$forceUpdate()}const e=await this.connectEthereumWallet();if(e&&this.isValidEthAddress(e))return this.walletAddress=e,this.isWalletConnected=!0,await this.saveWalletConnection("Crypto",e),n({title:"Crypto wallet connected successfully",icon:"success"}),this.isConnecting=!1,console.log("Crypto connected successfully - walletAddress:",this.walletAddress,"isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),void this.$forceUpdate();throw new Error("Crypto wallet connection failed")}catch(e){throw console.error("Crypto wallet connection detailed error:",e),e}},async connectEthereumWallet(){try{let e;if(console.log("Start connecting Ethereum wallet..."),window.tokenpocket&&window.tokenpocket.ethereum)e=window.tokenpocket.ethereum,console.log("Use TokenPocket's Ethereum provider to connect");else if(window.bifrost)e=window.bifrost,console.log("Use Bifrost provider to connect");else if(window.onchain)e=window.onchain,console.log("Use Onchain provider to connect");else if(window.crypto&&window.crypto.ethereum)e=window.crypto.ethereum,console.log("Use Crypto's Ethereum provider to connect");else{if(!window.ethereum)return console.log("No Ethereum provider found"),null;e=window.ethereum,console.log("Use standard Ethereum provider to connect")}console.log("Used Ethereum provider:",e);const t=await e.request({method:"eth_requestAccounts"});if(console.log("ETH accounts list obtained after connection:",t),t.length>0){const e=t[0];return console.log("First ETH account address connected:",e),this.isValidEthAddress(e)?(console.log("Connected ETH address validated:",e),e):(console.warn("Address obtained from connection is not a valid ETH address:",e),null)}return console.log("No ETH accounts obtained after connection"),null}catch(e){return console.log("Ethereum wallet connection failed:",e),null}},async openTokenPocket(){try{throw new Error("Please use a supported wallet on mobile devices")}catch(e){throw e}},async waitForTokenPocketReturn(){return new Promise(((e,t)=>{let o=0;const n=setInterval((()=>(o++,this.detectTokenPocketEnvironment()?(clearInterval(n),void this.connectWithTokenPocket().then(e).catch(t)):o>=30?(clearInterval(n),void t(new Error("Wallet connection timeout"))):void 0)),2e3)}))},getCurrentUrl:()=>window.location.href,copyLink(){const e=this.currentUrl;navigator.clipboard?navigator.clipboard.writeText(e).then((()=>{n({title:"Link copied",icon:"success"})})).catch((()=>{this.fallbackCopyTextToClipboard(e)})):this.fallbackCopyTextToClipboard(e)},fallbackCopyTextToClipboard(e){const t=document.createElement("textarea");t.value=e,document.body.appendChild(t),t.focus(),t.select();try{document.execCommand("copy"),n({title:"Link copied",icon:"success"})}catch(o){n({title:"Copy failed, please copy manually",icon:"none"})}document.body.removeChild(t)},async saveWalletConnection(t,o){console.log("saveWalletConnection start, current urlTid:",this.urlTid);try{e("walletType",t),e("walletAddress",o),e("walletConnected",!0),e("connectTime",Date.now());try{await this.callWalletConnectAPI(o),console.log("Wallet connection information saved and synchronized to server")}catch(n){console.warn("API synchronization failed, but does not affect wallet connection:",n.message)}}catch(s){throw console.error("Failed to save wallet connection information:",s),s}},async callWalletConnectAPI(t){try{const o=this.generateTid();console.log("准备调用API"),console.log("  - address (text):",t),console.log("  - tid (text):",o);const n=await f.user.walletConnect(t,o);if(console.log("API响应:",n),n&&0===n.code){console.log("钱包连接同步成功"),n.token?(m.setToken(n.token),console.log("Token已保存到全局状态和本地存储")):console.warn("响应中没有找到token");const t=n.id||n.tid||o;e("userTid",t),console.log("已保存tid到本地存储:",t)}else console.error("API返回格式异常:",n),console.warn("API格式异常但状态码正常，视为成功"),e("userTid",o),console.log("已保存tid到本地存储(API格式异常):",o);return n}catch(o){throw console.error("调用钱包连接接口失败:",o),console.error("错误详情:",{message:o.message,stack:o.stack,response:o.response}),o}},generateTid(){const e=this.urlTid||t("urlTid")||"";return console.log("generateTid called, return value (text):",e),e},simpleHash(e){let t=0;for(let o=0;o<e.length;o++){t=(t<<5)-t+e.charCodeAt(o),t&=t}return Math.abs(t)},navigateToHome(){s({url:"/pages/index/index"})},delay:e=>new Promise((t=>setTimeout(t,e))),isMobileDevice(){const e=navigator.userAgent;return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(e)},getTidFromUrl(e){if(e&&e.tid)return console.log("Get tid from options:",e.tid),e.tid;try{const e=new URLSearchParams(window.location.search).get("tid");if(e)return console.log("Get tid from URL search parameter:",e),e;const t=window.location.hash;if(t.includes("tid=")){const e=t.split("?")[1];if(e){const t=new URLSearchParams(e).get("tid");if(t)return console.log("Get tid from hash parameter:",t),t}}const o=window.location.href;console.log("Full URL:",o);const n=o.match(/[?&]tid=([^&#]*)/);if(n&&n[1])return console.log("Get tid from full URL match:",n[1]),n[1]}catch(t){console.error("H5 environment parsing URL parameters failed:",t)}return console.log("All methods failed to get tid"),""},showInviteCodeError(){l({title:"Invitation Code Required",content:"An invitation code is required to access this application. Please contact the administrator or use a valid invitation link.",showCancel:!1,confirmText:"OK"})},debugWalletState(){console.log("=== Current wallet state debug information ==="),console.log("walletAddress:",this.walletAddress),console.log("isConnecting:",this.isConnecting),console.log("showErrorPage:",this.showErrorPage),console.log("isWalletConnected:",this.isWalletConnected),console.log("Wallet connection interface display conditions:",this.walletAddress&&!this.isConnecting&&!this.showErrorPage);const e=t("walletAddress");console.log("Local storage address:",e),console.log("Local storage address is valid ETH:",this.isValidEthAddress(e)),e&&!this.isValidEthAddress(e)&&(console.log("Found non-ETH address, clearing..."),o("walletAddress"),o("walletType"),o("walletConnected"),this.walletAddress="",this.isWalletConnected=!1,this.$forceUpdate(),console.log("Cleared non-ETH address, re-checking connection status"),setTimeout((()=>{this.checkWalletConnection()}),1e3))},async checkActiveWalletConnection(){var e,t;try{if(console.log("Checking active wallet connection..."),"undefined"==typeof window)return console.log("Non-browser environment, cannot check wallet connection"),null;const n=[{name:"TokenPocket",provider:null==(e=window.tokenpocket)?void 0:e.ethereum},{name:"Bifrost",provider:window.bifrost},{name:"Onchain",provider:window.onchain},{name:"Crypto",provider:null==(t=window.crypto)?void 0:t.ethereum},{name:"MetaMask",provider:window.ethereum}];for(const{name:e,provider:t}of n)if(t)try{console.log(`Checking ${e} wallet...`);const o=await t.request({method:"eth_accounts"});if(o&&o.length>0){const t=o[0];if(console.log(`${e} detected active connection:`,t),this.isValidEthAddress(t))return console.log(`${e} returned valid ETH address:`,t),t;console.log(`${e} returned address is not a valid ETH address:`,t)}else console.log(`${e} has no active connection`)}catch(o){console.log(`Checking ${e} wallet failed:`,o.message)}return console.log("No active wallet connection detected"),null}catch(o){return console.error("Checking active wallet connection failed:",o),null}},async startConnectionFlow(){try{console.log("=== Start wallet connection process ==="),this.isConnecting=!0,this.showErrorPage=!1,console.log("连接状态更新 - isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage),await this.delay(100);const e=this.detectWalletEnvironment();console.log("Detected wallet environment:",e),e?await this.autoConnectWallet(e):(console.log("No supported wallet environment detected, displaying error page"),await this.delay(2e3),this.isConnecting=!1,this.showErrorPage=!0,console.log("Display error page - isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage))}catch(e){console.error("Connection process failed:",e),this.isConnecting=!1,this.showErrorPage=!0,console.log("Connection failed, displaying error page - isConnecting:",this.isConnecting,"showErrorPage:",this.showErrorPage)}},detectWalletEnvironment(){try{return console.log("Start detecting wallet environment..."),"undefined"==typeof window?(console.log("Non-browser environment"),null):this.detectTokenPocketEnvironment()?(console.log("Detected TokenPocket environment"),"TokenPocket"):window.bifrost?(console.log("Detected Bifrost environment"),"Bifrost"):window.onchain?(console.log("Detected Onchain environment"),"Onchain"):window.crypto&&window.crypto.ethereum?(console.log("Detected Crypto.com environment"),"Crypto"):window.ethereum?window.ethereum.isMetaMask?(console.log("Detected MetaMask environment"),"MetaMask"):window.ethereum.isImToken?(console.log("Detected ImToken environment"),"ImToken"):(console.log("Detected universal Ethereum environment"),"Ethereum"):(console.log("No wallet environment detected"),null)}catch(e){return console.error("Failed to detect wallet environment:",e),null}},detectTokenPocketEnvironment(){try{return"undefined"!=typeof window&&!!(window.tokenpocket||window.tronWeb||window.ethereum&&window.ethereum.isTokenPocket||navigator.userAgent&&navigator.userAgent.includes("TokenPocket"))}catch(e){return console.error("Failed to detect TokenPocket environment:",e),!1}},async autoConnectWallet(e){try{switch(console.log(`Start auto-connecting ${e} wallet...`),e){case"TokenPocket":await this.connectWithTokenPocket();break;case"MetaMask":await this.connectWithMetaMask();break;case"ImToken":await this.connectWithImToken();break;case"Bifrost":await this.connectWithBifrost();break;case"Onchain":await this.connectWithOnchain();break;case"Crypto":await this.connectWithCrypto();break;case"Ethereum":const t=await this.connectEthereumWallet();if(!t||!this.isValidEthAddress(t))throw new Error("Ethereum wallet connection failed");this.walletAddress=t,this.isWalletConnected=!0,await this.saveWalletConnection("Ethereum",t),this.setupWalletListeners(),n({title:"Ethereum wallet connected successfully",icon:"success"}),setTimeout((()=>{this.navigateToHome()}),1500);break;default:throw new Error(`Unsupported wallet type: ${e}`)}}catch(t){console.error(`Auto-connecting ${e} wallet failed:`,t),this.isConnecting=!1,this.showErrorPage=!0,n({title:`${e} wallet connection failed`,icon:"none",duration:3e3})}}},onShow(){if(console.log("Page displayed, current wallet state:",{walletAddress:this.walletAddress,isConnecting:this.isConnecting,showErrorPage:this.showErrorPage}),this.walletAddress&&!this.isValidEthAddress(this.walletAddress))return console.log("Found non-ETH address, clearing and reconnecting..."),void this.disconnectWallet().then((()=>{this.checkWalletConnection()}));this.walletAddress||this.isConnecting||this.showErrorPage||(console.log("Page displayed but no wallet address, re-checking connection status"),this.checkWalletConnection())},onHide(){console.log("Page hidden")},onUnload(){console.log("Page unloaded, removing wallet listeners"),this.removeWalletListeners()}},[["render",function(e,t,o,n,s,l){const f=u,m=a,C=g;return r(),c(m,{class:"connect-container"},{default:i((()=>[d(m,{class:"gradient-bg"},{default:i((()=>[d(m,{class:"overlay-image-container"},{default:i((()=>[d(f,{class:"overlay-image",src:"https://www.onchainus.net/static/media/img_banner.c2d112845c769829e979.png",mode:"aspectFill"})])),_:1})])),_:1}),d(m,{class:"content-container"},{default:i((()=>[!s.showErrorPage&&s.isConnecting?(r(),c(m,{key:0,class:"connecting-section"},{default:i((()=>[d(m,{class:"welcome-section"},{default:i((()=>[d(m,{class:"logo-container"},{default:i((()=>[d(m,{class:"app-logo-custom"},{default:i((()=>[d(m,{class:"ai-icon"},{default:i((()=>[d(m,{class:"ai-circle"},{default:i((()=>[d(C,{class:"ai-text"},{default:i((()=>[h("AI")])),_:1})])),_:1}),d(m,{class:"ai-dots"},{default:i((()=>[d(m,{class:"dot dot1"}),d(m,{class:"dot dot2"}),d(m,{class:"dot dot3"})])),_:1})])),_:1})])),_:1})])),_:1}),d(C,{class:"welcome-title"},{default:i((()=>[h("Welcome to AI Smart Contracts")])),_:1}),d(C,{class:"welcome-subtitle"},{default:i((()=>[h("Connecting to Wallet...")])),_:1})])),_:1}),d(m,{class:"connect-status"},{default:i((()=>[d(m,{class:"loading-spinner"}),d(C,{class:"connecting-text"},{default:i((()=>[h("Connecting to wallet...")])),_:1})])),_:1})])),_:1})):w("",!0),s.showErrorPage?(r(),c(m,{key:1,class:"error-section"},{default:i((()=>[d(m,{class:"error-card"},{default:i((()=>[d(m,{class:"character-container"},{default:i((()=>[d(m,{class:"character-avatar"},{default:i((()=>[d(m,{class:"character-head"},{default:i((()=>[d(m,{class:"character-face"},{default:i((()=>[d(m,{class:"character-eyes"},{default:i((()=>[d(m,{class:"eye left-eye"}),d(m,{class:"eye right-eye"})])),_:1}),d(m,{class:"character-mouth"})])),_:1}),d(m,{class:"character-hair"}),d(m,{class:"character-glasses"},{default:i((()=>[d(m,{class:"glass left-glass"}),d(m,{class:"glass right-glass"}),d(m,{class:"glass-bridge"})])),_:1})])),_:1}),d(m,{class:"character-body"},{default:i((()=>[d(m,{class:"character-suit"}),d(m,{class:"character-tie"}),d(m,{class:"character-hand"},{default:i((()=>[d(m,{class:"coffee-cup"})])),_:1})])),_:1})])),_:1})])),_:1}),d(m,{class:"error-content"},{default:i((()=>[d(C,{class:"error-title"},{default:i((()=>[h("Unable to connect")])),_:1}),d(C,{class:"error-subtitle"},{default:i((()=>[h("This website relies on Ethereum smart contracts to operate, please use a decentralized wallet to access.")])),_:1}),d(C,{class:"supported-wallets"},{default:i((()=>[h("Supported wallets: TokenPocket, MetaMask, ImToken, Bifrost, Onchain, Crypto.com")])),_:1}),d(m,{class:"copy-button",onClick:l.copyLink},{default:i((()=>[d(C,{class:"copy-text"},{default:i((()=>[h("Copy Link")])),_:1})])),_:1},8,["onClick"])])),_:1})])),_:1})])),_:1})):w("",!0),s.showErrorPage||s.isConnecting?w("",!0):(r(),c(m,{key:2,class:"loading-section"},{default:i((()=>[d(m,{class:"welcome-section"},{default:i((()=>[d(m,{class:"logo-container"},{default:i((()=>[d(m,{class:"app-logo-custom"},{default:i((()=>[d(m,{class:"ai-icon"},{default:i((()=>[d(m,{class:"ai-circle"},{default:i((()=>[d(C,{class:"ai-text"},{default:i((()=>[h("AI")])),_:1})])),_:1}),d(m,{class:"ai-dots"},{default:i((()=>[d(m,{class:"dot dot1"}),d(m,{class:"dot dot2"}),d(m,{class:"dot dot3"})])),_:1})])),_:1})])),_:1})])),_:1}),d(C,{class:"welcome-title"},{default:i((()=>[h("Welcome to AI Smart Contracts")])),_:1}),d(C,{class:"welcome-subtitle"},{default:i((()=>[h("Checking network connection...")])),_:1})])),_:1}),d(m,{class:"connect-status"},{default:i((()=>[d(m,{class:"loading-spinner"}),d(C,{class:"connecting-text"},{default:i((()=>[h("Checking network connection...")])),_:1})])),_:1})])),_:1}))])),_:1})])),_:1})}],["__scopeId","data-v-2cb64561"]]);export{p as default};
